webpackJsonp([19],{

/***/ 563:
/***/ (function(module, exports, __webpack_require__) {

var disposed = false
function injectStyle (ssrContext) {
  if (disposed) return
  __webpack_require__(614)
}
var normalizeComponent = __webpack_require__(197)
/* script */
var __vue_script__ = __webpack_require__(616)
/* template */
var __vue_template__ = __webpack_require__(617)
/* styles */
var __vue_styles__ = injectStyle
/* scopeId */
var __vue_scopeId__ = "data-v-05e43fac"
/* moduleIdentifier (server only) */
var __vue_module_identifier__ = null
var Component = normalizeComponent(
  __vue_script__,
  __vue_template__,
  __vue_styles__,
  __vue_scopeId__,
  __vue_module_identifier__
)
Component.options.__file = "resources\\assets\\js\\admin\\pages\\dashboard.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key.substr(0, 2) !== "__"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] dashboard.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-05e43fac", Component.options)
  } else {
    hotAPI.reload("data-v-05e43fac", Component.options)
  }
  module.hot.dispose(function (data) {
    disposed = true
  })
})()}

module.exports = Component.exports


/***/ }),

/***/ 614:
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(615);
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add the styles to the DOM
var update = __webpack_require__(196)("58bca38b", content, false);
// Hot Module Replacement
if(false) {
 // When the styles change, update the <style> tags
 if(!content.locals) {
   module.hot.accept("!!../../../../../node_modules/css-loader/index.js?sourceMap!../../../../../node_modules/vue-loader/lib/style-compiler/index.js?{\"vue\":true,\"id\":\"data-v-05e43fac\",\"scoped\":true,\"hasInlineConfig\":true}!../../../../../node_modules/sass-loader/lib/loader.js!../../../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./dashboard.vue", function() {
     var newContent = require("!!../../../../../node_modules/css-loader/index.js?sourceMap!../../../../../node_modules/vue-loader/lib/style-compiler/index.js?{\"vue\":true,\"id\":\"data-v-05e43fac\",\"scoped\":true,\"hasInlineConfig\":true}!../../../../../node_modules/sass-loader/lib/loader.js!../../../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./dashboard.vue");
     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
     update(newContent);
   });
 }
 // When the module is disposed, remove the <style> tags
 module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 615:
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(18)(true);
// imports


// module
exports.push([module.i, "\n.setting-icon[data-v-05e43fac] {\n  color: #777;\n  cursor: pointer;\n}\n.account-info[data-v-05e43fac] {\n  padding: 0;\n  margin: 0;\n}\n.account-info li[data-v-05e43fac] {\n    margin: .5em 0;\n    color: #444;\n}\n.account-info .label[data-v-05e43fac] {\n    color: #000;\n    display: block;\n    float: left;\n    width: 4em;\n    text-align-last: justify;\n    margin-right: 1em;\n}\n.plus-card[data-v-05e43fac] {\n  display: block;\n  overflow: hidden;\n  background-color: #fff;\n  height: 100%;\n  position: relative;\n}\n.plus-card i[data-v-05e43fac] {\n    position: absolute;\n    font-size: 3rem;\n    color: lightgray;\n    top: 50%;\n    left: 50%;\n    margin-top: -1.5rem;\n    margin-left: -1.5rem;\n}\n", "", {"version":3,"sources":["D:/UPUPW/vhosts/willshop/resources/assets/js/admin/pages/dashboard.vue"],"names":[],"mappings":";AAAA;EACE,YAAY;EACZ,gBAAgB;CAAE;AAEpB;EACE,WAAW;EACX,UAAU;CAAE;AACZ;IACE,eAAe;IACf,YAAY;CAAE;AAChB;IACE,YAAY;IACZ,eAAe;IACf,YAAY;IACZ,WAAW;IACX,yBAAyB;IACzB,kBAAkB;CAAE;AAExB;EACE,eAAe;EACf,iBAAiB;EACjB,uBAAuB;EACvB,aAAa;EACb,mBAAmB;CAAE;AACrB;IACE,mBAAmB;IACnB,gBAAgB;IAChB,iBAAiB;IACjB,SAAS;IACT,UAAU;IACV,oBAAoB;IACpB,qBAAqB;CAAE","file":"dashboard.vue","sourcesContent":[".setting-icon {\n  color: #777;\n  cursor: pointer; }\n\n.account-info {\n  padding: 0;\n  margin: 0; }\n  .account-info li {\n    margin: .5em 0;\n    color: #444; }\n  .account-info .label {\n    color: #000;\n    display: block;\n    float: left;\n    width: 4em;\n    text-align-last: justify;\n    margin-right: 1em; }\n\n.plus-card {\n  display: block;\n  overflow: hidden;\n  background-color: #fff;\n  height: 100%;\n  position: relative; }\n  .plus-card i {\n    position: absolute;\n    font-size: 3rem;\n    color: lightgray;\n    top: 50%;\n    left: 50%;\n    margin-top: -1.5rem;\n    margin-left: -1.5rem; }\n"],"sourceRoot":""}]);

// exports


/***/ }),

/***/ 616:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _config = __webpack_require__(99);

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  data: function data() {
    return {};
  },
  mounted: function mounted() {
    this.axios.get('user').then(function (response) {}).catch(function (error) {
      console.log(error);
    });
  },


  methods: {}
};

/***/ }),

/***/ 617:
/***/ (function(module, exports, __webpack_require__) {

var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "main-container main-with-padding" },
    [
      _vm._v("\n  adfasdfasdf\n  "),
      _c(
        "el-row",
        { attrs: { gutter: 20, type: "flex", justify: "center" } },
        [
          _c("el-col", { attrs: { span: 6 } }, [
            _c("h1", [_vm._v("dashboard")])
          ])
        ],
        1
      )
    ],
    1
  )
}
var staticRenderFns = []
render._withStripped = true
module.exports = { render: render, staticRenderFns: staticRenderFns }
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-05e43fac", module.exports)
  }
}

/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,